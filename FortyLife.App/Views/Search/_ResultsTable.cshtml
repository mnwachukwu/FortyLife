@using FortyLife.Core
@model FortyLife.App.Models.SearchResultsViewModel

@{
    var alternater = false;

    // we need to escape around the title so that " and ' can be distinguished and our HTML in the title attribute can be rendered in the tooltips
    string TransformIconName(string name) => $"<span class='oi oi-loop-square' data-toggle='tooltip' data-placement='left' title=\"{name}\"></span>";
    string TransformIconMana(string costHtml) => $"<span class='oi oi-loop-square' data-toggle='tooltip' data-placement='left' data-html='true' title=\"{costHtml}\"></span>";
    string TransFormIconType(string type) => $"<span class='oi oi-loop-square' data-toggle='tooltip' data-placement='left' data-html='true' title=\"{type}\"></span>";
}

<table class="table table-sm table-hover">
    <thead>
        <tr class="bg-primary">
            <th>Name</th>
            <th>Mana Cost</th>
            <th class="text-center">Color</th>
            <th class="text-center">Color Identity</th>
            <th>Type</th>
            <th class="text-center">Rarity</th>
            <th>Latest Set</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var cardResult in Model.Results.Data)
        {
            // custom stripping of the table TODO: would we just want to edit the css and custom strip every table this way?
            var rowClass = alternater ? "bg-active" : "table-default";

            <!-- manually encode our reserved characters in the param for card names (' = %27), (/ = %2F) from https://www.url-encode-decode.com/
            TODO: this might not be the best way to handle this -->
            <tr id="card-tooltip" class="@rowClass" data-toggle="tooltip" data-placement="bottom"
                data-html="true" title="@CardParsingEngine.RenderImage(cardResult, CardParsingEngine.CardSize.Normal, 60, true)"
                onclick="window.location.assign('/CardDetails?cardName=@cardResult.Name.Replace("//", "%2F%2F").Replace("'", "%27")&setCode=@cardResult.Set'); $('#lotus-modal').modal();">
                <td><a href="/CardDetails?cardName=@cardResult.Name.Replace("//", "%2F%2F").Replace("'", "%27")&setCode=@cardResult.Set">@Html.Raw(cardResult.IsDoubleFaced ? $"{cardResult.CardFaces[0].Name} {TransformIconName(cardResult.CardFaces[1].Name)}" : cardResult.Name)</a></td>
                <td>@Html.Raw(cardResult.IsDoubleFaced ? $"{CardParsingEngine.RenderManaSymbols(cardResult.CardFaces[0].ManaCost)} {(!string.IsNullOrEmpty(cardResult.CardFaces[1].ManaCost) ? TransformIconMana(CardParsingEngine.RenderManaSymbols(cardResult.CardFaces[1].ManaCost)) : string.Empty)}" : CardParsingEngine.RenderManaSymbols(cardResult.ManaCost))</td>
                <td>@Html.Raw(CardParsingEngine.RenderColorWheel(CardParsingEngine.DeduceCardColor(cardResult)))</td>
                <td>@Html.Raw(CardParsingEngine.RenderColorWheel(cardResult.ColorIdentity))</td>
                <td>@Html.Raw(cardResult.IsDoubleFaced ? $"{CardParsingEngine.RenderCardType(cardResult.CardFaces[0].TypeLine)} {TransFormIconType(CardParsingEngine.RenderCardType(cardResult.CardFaces[1].TypeLine))}" : CardParsingEngine.RenderCardType(cardResult.TypeLine))</td>
                <td class="text-center">@Html.Raw(CardParsingEngine.RenderSetSymbol(cardResult.Set, cardResult.Rarity))</td>
                <td>@cardResult.SetName</td>
            </tr>

            alternater = !alternater;
        }
    </tbody>
</table>