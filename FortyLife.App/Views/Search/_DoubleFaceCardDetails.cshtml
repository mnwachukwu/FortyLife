@using System.Globalization
@using FortyLife.Core
@using FortyLife.DataAccess
@model FortyLife.DataAccess.Scryfall.Card

@{
    var rarity = Model.Rarity == "rare" ? "Rare" : Model.Rarity.Replace(Model.Rarity[0].ToString(), Model.Rarity[0].ToString().ToUpper());
    var requestEngine = new ScryfallRequestEngine();
}

<!-- Card profile -->
<div class="pb-2">
    <div class="row">
        <!-- Card image -->
        <div class="col-md-6">
            @if (Model.ImageUris.Normal != null)
            {
                <div class='d-flex justify-content-center'>
                    <div class="card-image">
                        <img class="card card-shadow" src="@Model.ImageUris.Normal" alt="@Model.Name" title="@Model.Name [@Model.Set.ToUpper()]" />
                    </div>
                </div>
            }
            else
            {
                <div class='d-flex justify-content-center'>
                    <span id="which-face" class="small text-muted">Front</span>
                </div>

                <div id="card-image" class="flip-card">
                    <div class="flip-card-inner">
                        <div class="flip-card-front">
                            <img id="front" class="card card-shadow" src="@Model.CardFaces[0].ImageUris.Normal" alt="@Model.Name" title="@Model.Name [@Model.Set.ToUpper()]" />
                        </div>
                        <div class="flip-card-back">
                            <img id="back" class="card card-shadow" src="@Model.CardFaces[1].ImageUris.Normal" alt="@Model.Name" title="@Model.Name [@Model.Set.ToUpper()]" />
                        </div>
                    </div>
                </div>

                <div id="flip-button" class='d-flex justify-content-center'>
                    <button class="btn btn-outline-info"><span class="oi oi-loop"></span> Flip</button>
                </div>
            }
        </div>

        <!-- Card text-->
        <div class="col-md-6">
            <div class="card border-primary">
                <!-- Front -->
                <div class="card-header">
                    <span class="oi oi-magnifying-glass"></span> @Model.CardFaces[0].Name <span class="float-right">@Html.Raw(CardParsingEngine.RenderManaSymbols(Model.CardFaces[0].ManaCost))</span> <br />
                </div>
                <div class="card-body">
                    <p class="card-text">@Model.CardFaces[0].TypeLine</p>
                    <p class="card-text">
                        @Html.Raw(CardParsingEngine.RenderLineBreaks(CardParsingEngine.RenderSymbols(Model.CardFaces[0].OracleText.Replace("(", "<i>(").Replace(")", ")</i>"))))
                    </p>
                    @if (Model.CardFaces[0].FlavorText != null)
                    {
                        <p class="card-text"><i>@Model.CardFaces[0].FlavorText</i></p>
                    }
                    @if (!string.IsNullOrEmpty(Model.CardFaces[0].Power) || !string.IsNullOrEmpty(Model.CardFaces[0].Toughness))
                    {
                        <p>
                            <span class="float-right">@Model.CardFaces[0].Power <i class="ms ms-power" title="Power"></i> / @Model.CardFaces[0].Toughness <i class="ms ms-toughness" title="Toughness"></i></span>
                        </p>
                    }
                    @if (!string.IsNullOrEmpty(Model.CardFaces[0].Loyalty))
                    {
                        <p>
                            <span class="float-right lead"><i class="ms ms-loyalty-start ms-loyalty-@Model.CardFaces[0].Loyalty" title="enters the battlefield with @(Model.CardFaces[0].Loyalty == "1" ? "one" : Model.CardFaces[0].Loyalty) loyalty counter@(Model.CardFaces[0].Loyalty == "1" ? string.Empty : "s")"></i></span>
                        </p>
                    }
                </div>

                <!-- Back -->
                <div class="card-header">
                    <span class="oi oi-magnifying-glass"></span> @Model.CardFaces[1].Name <span class="float-right">@Html.Raw(!string.IsNullOrEmpty(Model.CardFaces[1].ManaCost) ? CardParsingEngine.RenderManaSymbols(Model.CardFaces[1].ManaCost) : string.Empty)</span> <br />
                </div>
                <div class="card-body pb-1">
                    <p class="card-text">@Model.CardFaces[1].TypeLine</p>
                    <p class="card-text">
                        @Html.Raw(CardParsingEngine.RenderLineBreaks(CardParsingEngine.RenderSymbols(Model.CardFaces[1].OracleText.Replace("(", "<i>(").Replace(")", ")</i>"))))
                    </p>
                    @if (Model.CardFaces[1].FlavorText != null)
                    {
                        <p class="card-text"><i>@Model.CardFaces[1].FlavorText</i></p>
                    }
                    @if (!string.IsNullOrEmpty(Model.CardFaces[1].Power) || !string.IsNullOrEmpty(Model.CardFaces[1].Toughness))
                    {
                        <p>
                            <span class="float-right">@Model.CardFaces[1].Power <i class="ms ms-power" title="Power"></i> / @Model.CardFaces[1].Toughness <i class="ms ms-toughness" title="Toughness"></i></span>
                        </p>
                    }
                    @if (!string.IsNullOrEmpty(Model.CardFaces[1].Loyalty))
                    {
                        <span class="float-right lead"><i class="ms ms-loyalty-start ms-loyalty-@Model.CardFaces[1].Loyalty" title="enters the battlefield with @(Model.CardFaces[1].Loyalty == "1" ? "one" : Model.CardFaces[1].Loyalty) loyalty counter@(Model.CardFaces[1].Loyalty == "1" ? string.Empty : "s")"></i></span>
                    }
                </div>

                <div class="card-body pt-1 pb-2">
                    <p>
                        <!-- Card printings button -->
                        @Html.Partial("_PrintingsButton", Model)

                        <br />

                        @rarity, #@Model.CollectorNumber/@(requestEngine.SetCardCount(Model.Set)) <span class="float-right"><i class="ms ms-artist-nib" title="Artist"></i> @Model.Artist</span>
                    </p>
                </div>

                <!-- legatlities -->
                @Html.Partial("_Legalities", Model)
            </div>

            <p />

            <!-- TCG Player pricing -->
            @Html.Partial("_TCGPlayerPricing", Model)
        </div>
    </div>
</div>

<!-- Notes and rulings -->
@Html.Partial("_NotesAndRulings", Model)